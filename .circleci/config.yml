
version: 2.1

jobs:
  say-hello:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  create-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: "Create CF stack..."
          command: |
            aws cloudformation create-stack \
              --template-body file://cf-config.yml \
              --parameters file://cf-params.json \
              --stack-name stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --region us-east-1
      - run:
          command: |
            aws cloudformation wait stack-create-complete \
            --stack-name stack-${CIRCLE_WORKFLOW_ID:0:5}
          name: Wait until Stack is created        
      - run:
          name: "Create inventory.txt..." 
          command: |
            echo "[all]" > inventory.txt      
      - run:
          name: "Get public IP of EC2"
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=udaC3" \
            --output text >> inventory.txt  
      - persist_to_workspace:
          root: ~/     
          paths: 
            - inventory.txt
  configure-infrastructure:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [58:15:66:7c:ce:e8:20:4f:84:d0:4c:2e:a9:ee:5a:f9]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - attach_workspace:
          at: ~/      
      - run:
          name: Run playbook and configure server
          command: |
            ansible-playbook main-playbook.yml -i inventory.txt
workflows:
  the-workflow:
    jobs:
      - create-infrastructure
      - configure-infrastructure:
          requires: 
            - create-infrastructure
